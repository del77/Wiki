@page
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;
@model ArticlesModel
@using Kendo.Mvc.UI
@using System.Collections.Generic
@using X.PagedList.Mvc;
@using X.PagedList;
@addTagHelper *, Kendo.Mvc
@{
    ViewData["Title"] = "About";
}




<h2>@ViewData["Title"]</h2>


<form asp-page="./Articles" method="get">

    <div class="form-actions no-color">
        <p>
            Find by name:
        </p>
        <input type="search" name="title" value="@Model.Filter.Title" class="glyphicon-search" />
        <label>Category</label>
        <select asp-items="@Model.Filter.Categories" name="selectedCategory"></select>
        @if (Model.CanRead)
        {
            <label>Status</label>
            <select asp-items="@Model.Filter.Statuses" name="selectedStatus"></select>
        }
        <table class="table-responsive">
            <tr>
                @{
                    foreach (var tag in Model.Filter.Tags)
                    {
                        @:<td>
                            <input type="checkbox"
                                   name="selectedTags"
                                   value="@tag.Id"
                                   @(Html.Raw(tag.Checked ? "checked=\"checked\"" : "")) />
                            @tag.Tag
                        @:</td>
                    }
                @:</tr>
                }
            </table>

            <input type="submit" value="Search" class="btn btn-default" />

        </div>
    </form>
    <a asp-page="./Articles">Back to full List</a>



    <table id="example" class="display">
        <thead>
            <tr>
                <th>
                    Title
                </th>
                <th>
                    Category
                </th>
                @if (Model.CanRead)
                {
                    <th>
                        Status
                    </th>
                }

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Articles)
            {
                <tr>
                    <td>
                        <a asp-page="/Articles/Get" asp-route-articleid="@item.ArticleId" asp-route-textid="@item.TextId">@Html.DisplayFor(modelItem => item.Title)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.Category)
                    </td>
                        @if (Model.CanRead)
                        {
                        <td>
                            @Html.DisplayFor(modelItem => item.Status.Status)
                        </td>
                        }
                </tr>
            }
        </tbody>
    </table>

    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/jq-3.3.1/dt-1.10.18/fh-3.1.4/datatables.min.css" />
    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/jq-3.3.1/dt-1.10.18/fh-3.1.4/datatables.min.js"></script>
    <script type="text/javascript" src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
    <script type="text/javascript" src="~/js/bootstrap3-typeahead.js"></script>


    <script>

        var jquery = jQuery.noConflict();
        jquery(document).ready(function () {
            // Setup - add a text input to each footer cell
            $('#example thead tr').clone(true).appendTo('#example thead');
            $('#example thead tr:eq(1) th').each(function (i) {
                var title = $(this).text();
                $(this).html('<input type="text" placeholder="Search ' + title + '" />');

                $('input', this).on('keyup', function () {
                    if (table.column(i).search() !== this.value) {
                        table
                            .column(i)
                            .search(this.value)
                            .draw();
                    }
                });
            });


            var table = jquery('#example').DataTable({

                orderCellsTop: true,
                fixedHeader: true,
                'initComplete': function () {
                    var api = this.api();

                    // Initialize Typeahead plug-in
                    //jquery('.dataTables_filter input[type="search"]', api.table().container())
                    jquery('input', api.table().container())
                        .typeahead({
                            source: function (query, process) {
                                return process(@Html.Raw(Model.json));
                            },
                            afterSelect: function (value) {
                                api.search(value).draw();
                            },
                            showHintOnFocus: "all",
                            showCategoryHeader: "true"
                        }
                        );
                }
            });
        });
    </script>
